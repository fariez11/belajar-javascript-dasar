MATERI 1 ---------------------------------------------------------------------------------------------------------------------------------
*catatan
   html dan css adalah bukan bahasa pemrograman

MATERI 2 ---------------------------------------------------------------------------------------------------------------------------------
   - program adalah kumpulan / serangkaian instruksi atau
   - program adalah urutan instruksi terstruktur yang dirancang  agar komputer dapat berperilaku
      sesuai dengan ketentuan, dengan tujuan untuk menyelesaikan sebuah pekerjaan.
   - pemrograman adalah cara kita untuk memberikan instruksi yang simpel dan terstruktur pada komputer.

MATERI 3 ---------------------------------------------------------------------------------------------------------------------------------

MATERI 4 ---------------------------------------------------------------------------------------------------------------------------------
   - compiler 
   ex: - com A akan membuat program dan program tersebut akan diberikan kepada com B
       - com A akan membuat SC dan mencompile yang menghasilkan sebuah file baru 
         dan file baru tersebut akan di berikan kepada com B 
         dan hasil kompilasi tsb dinamakan (file excutable/program yang yang sudah bisa dieksekusi /file exe) 
         dan nantinya setelah com B menjalankan programnya maka programnya akan bisa dilihat oleh com B 
         *com B tidak perlu memiliki compiler lagi dan com B tidak akan pernah melihat SC yang diberikan oleh com A
         (com B hanya menjalankan saja)

   kelebihan : - siap untuk dijalankan                            kekurangan : - tidak lintas platform
               - lebih cepat                                                   - tidak fleksibel
               - sourcecode tidak terlihat                                     - langkah tambahan

   bahasa yang menggunakan : C, C++, Objective-C
   
   - interpreter
   ex: - com A membuat SC dan SC tsb akan di berikan kepada com B dan com B akan menggunakan interpreter
         untuk menerjemahkan program com A lalu com B menjalankan interpreternya sekaligus menjalankan programnya

   kelebihan : - lintas platform                                  kekurangan : - butuh interpreter
               - fleksibel                                                     - lebih lambat
               - mudah untuk diuji                                             - sourcode mudah diakses

   bahasa yang menggunakan : Javascript, PHP

   - Hybrid (intermediate language)
   yaitu menggabungkan kelebihannya compiler dan interpreter
   ex: > saat com A membuat SC dia melakukan compile tetapi setelah membuat compile tidak menghasilkan file excutable
         melainkan menghasilkan file intermediate language/byte code(sudah cukup teroptimasi untuk bahasa mesin dan 
         pada umumnya di close platform jadi bisa dijalankan di semua sistem operasi), 
       > kemudian IL tadi diberikan kepada com B dan com B melakukan langkah terakhir sebelum menjalankan program 
         dengan JIT(Just-In-Time) compilation (melakukan compile sambil menjalankan programnya sekaligus) 
   
   bahasa yang menggunakan : java, VB.NET, Python

   mau bikin apa? 

   web development               : PHP, C, Javascript, C++, JAVA, PYTHON, RUBY
   game development              : C#, C, C++, JAVA, PYTHON, RUBY
   mobile app development        : C#, C++, JAVA
   data analys                   : R, PYTHON, MATLAB
   embedded system programming   : C, C++, PYTHON 
    
   sumber : - https://www.udacity.com/blog/2015/05/pick-your-first-programming-language.html
            - http://carlcheo.com/startcoding
            - https://codepolitan.com/blog/bahasa-pemrograman-apa-cocok-dipelajari-pertama-kali


MATERI 5 ----------------------------------------------------------------------------------------------------------------------------------

   wikipedia                  : "Javascript is a high-level, scripting, untype, and interpreted prgramming language"
   mpjme - funfunfunction     : "easy to learn, hard to master"

   Javascript bisa apa ?
      Client-side Web development   : - Native Javascript / Vanilla Javascript
         (front-end development)      - JQuery
                                      - AngularJS, React, Ember, Backbone
                                      - dll.
      Server-side Development       : - NodeJS
         (back-end development)       - ExpressJS
      Browser Extension / Add-on
      Dekstop Application           : - JQuery Mobile, Cordova / PhoneGap
      IoT & Robotic                 : - CyclonJS, Jhonny-Five
      JSON

MATERI 6 ----------------------------------------------------------------------------------------------------------------------------------
   sejarah Javascript

MATERI 7 ----------------------------------------------------------------------------------------------------------------------------------

*catatan
   console : Ctrl + Alt + J
   <script> di taruh di sebelum </body>

MATERI 8 ----------------------------------------------------------------------------------------------------------------------------------
   "bit/ binery digit adalah satuan terkecil dari data yang ada di dalam komputer" 
   bit hanya ada 0 & 1

   tipe data : - number
               - string 
               - boolean 
               - object
               - function
               - undefined

MATERI 9 ----------------------------------------------------------------------------------------------------------------------------------
   "numers in Javascript are double-precision floating point 64-bit format IEEE 754 values"
   maksudnya : didalam Javascript bilangan integer atau bulat tetapi yang ada adalah floating point(bilangan pecahan)

   angka spesial :   > Infinity           : 2/0 = Infinity 
                     > -Infinity          : -2/0 = -Infinity
                     > NaN (Not a Number) : 0/0 = NaN, 100/"apel" = NaN,

*catatan
   - jangan mengawali angka dengan 0 (karena akan dianggap sebagai angka oktal)
   - jangan mengawali angka dengan 0x (karena akan dianggap sebagai bilngan hexadesimal)
   - 100/"10" = 10 (karena javascript string tsb akan membaca juga sebagai angka)

MATERI 10 ---------------------------------------------------------------------------------------------------------------------------------
   "operator dalam javascript adalah sebuah simbol yang digunakan untuk melakukan operasi"
   operator : > binary : membutuhkan 2 operand
               ex: operand1 operator operand2  
                  - aritmatika              : +,-,*,/,% (tetap menggunakan operator precedence/urutan operasi matematika(-KuKaBaTaKu-))
                  - penugasan/assignment    : =, +=, -=, *=, /=, %= (yang mengoperasikan angka tanpa menghilangkan angka sebelumnya)  
                  - perbandingan/comparison :   ~ ==  : sama dengan
                                                ~ !=  : tidak sama dengan
                                                ~ === : strict sama dengan (*operator identitas/membandingkan juga tipe datanya)
                                                ~ !== : strict tidak sama dengan (*operator identitas/membandingkan juga tipe datanya)
                                                ~ >   : lebih besar dari
                                                ~ <   : lebih kecil dari
                                                ~ >=  : lebih besar sama dengan
                                                ~ <=  : lebih kecil sama dengan
                        dan operator diatas menghasilkan boolean (true atau false)
                  - logika/logical          : && (AND), || (OR), ! (NOT) 
                                    ex: (10 % 2 == 0) && (x < 10), (10 % 2 == 0) || (x < 10), !(x , 20)
                  - string                  : hanya + (jika '+' didalam string akan menjadi operator penggabung string)
                                    ex: a + " " + b

MATERI 11 ----------------------------------------------------------------------------------------------------------------------------------
                                                                                                                *lanjutan dari materi diatas
               > ternary : membutuhkan 3 operand
               ex: ~~~
                     - kondisional : (kondisi) ? benar : salah
                           ex: (x % 2 == 0) ? "genap" : "ganjil" 

              > unary : membutuhkan 1 operand
               ex: operator operand atau operand operator
                     - typeof  : untuk mengetahui tipe data apa dari nilai yang kita masukkan nanti kedalamnya
                           caranya : typeof(operand)
                           ex: typeof(10) -> number, typeof("10") -> string, typeof(true) -> boolean

MATERI 12 ---------------------------------------------------------------------------------------------------------------------------------
   "tipe data String dalam javascript digunakan untuk merepresentasikan data tekstual(plain text)"

   escape character :  \" atau \"
      ex: 'dilaksanakan pada hari jum\'at ' (begitupun menggunakan ")
   
   macam-macam : ~ \0    -> karakter NUll
                 ~ \'    -> '
                 ~ \"    -> "
                 ~ \\    -> \
                 ~ \n    -> new line / garis baru
                 ~ \t    -> tab 
                 ` \b    -> backspace
                 \uXXXXX -> unicode
                     sumber: https://en.wikipedia.org/wiki/List/of_Unicode_characters
   
   concatenation/konkatenasi : + (untuk penggabungan antar string)
   .length : untuk menghitung panjang string
      ex: "Sandhika Galih".length = 14 (spasi tetap terhitung)

*catatan
   - huruf besar dan kecil tetap berpengaruh dalam perbandingan string

MATERI 13 -------------------------------------------------------------------------------------------------------------------------------
   "boolean adalah sebuah tipe data yang digunakan untuk merepresentasikan logika true dan false "
   biasanya digunakan pada statement pngkondisian, untuk menentukan aksi yang berbeda dan mengatur akur kendali program

   truthy : true, non-zero number (angka selain 0), "string", object, arrays, function
   falsy  : false, 0, "", undefined, null, NaN

MATERI 14 --------------------------------------------------------------------------------------------------------------------------------
   "variable sebuah 'tempat/wadah' yang memiliki nama, yang digunakan untuk menyimpan nilai"

   deklarasi   : mendaftarkan variable ke dalam lingkup yang sesuai 
   inisialisasi: menyediakan memori untuk variable
   assignment  : menetapkan nilai yang spesifik ke dalam variable 
      
      ex: var x;  //deklarasi & inisialisasi
          x = 20; //assignment

      deklarasi variable : - var       - let          - const 
      
      keyword & reserved word(kata yang tidak boleh digunakan sebagai nama variable) :
         - break      - case      - catch      - class     - const     - continue
         - debugger   - default   - delete     - do        - else      - enum
         - export     - extends   - false      - finally   - for
         - function   - if        - implement  - import    - in
         - instanceof - interface - let        - new       - null
         - package    - private   - protected  - public    - return    - try 
         - static     - super     - switch     - this      - throw     - true 
         - typeof     - var       - void       - while     - with      - yield

      shorthand : untuk membuat variable bisa dengan tag var diawal saja
         ex: var nama = "Sandhika",
                 umur = 31;

*catatan
   - var gaboleh pake spasi;                                (X)
   - var tidak boleh diawali dengan angka ex: var 1boleh;   (X) 
   - var boleh1;                                            (V)
   - var ini_juga_boleh;                                    (V)
   - var boleh$;                                            (V)
   - var $_$;                                               (V)
   - var iniBolehBanget;  (Camel Case)                      (V)

MATERI 15 --------------------------------------------------------------------------------------------------------------------------------
   tag <script> </script> untuk menuliskan syntax javascript

*catatan
   - Javascript juga bisa ditaruh internal maupun external

MATERI 16 --------------------------------------------------------------------------------------------------------------------------------
   popup box : - alert
               - prompt
               - confirm

MATERI 17 --------------------------------------------------------------------------------------------------------------------------------
   Control FLow : - Normal Flow  : apabila program kita memiliki lebih dari satu statement, maka statement tersebut
                                   akan dieksekusi dari atas ke bawah atau dari kiri ke kanan
                  - Pengulangan  : ex: for , while, do while
                     (loop/ iteration)  
                  - Pengkondisian: if else(termasuk else if), switch
                     (percabangan)

MATERI 18 --------------------------------------------------------------------------------------------------------------------------------
   Rumus :
      nilai awal
      while(kondisi terminasi){
         aksi

         increment / decrement
      }

MATERI 19 --------------------------------------------------------------------------------------------------------------------------------
MATERI 20 --------------------------------------------------------------------------------------------------------------------------------
   Rumus :
      for(var nilaiAwal = 1 ; nilaiAwal <= 10 ; nilaiAwal++ ){
        console.log('hello world  '+ nilaiAwal + 'x');
      }
      
MATERI 21 --------------------------------------------------------------------------------------------------------------------------------
   Rumus : 
      if(kondisi){
         aksi  -> lakukan aksi jika kondisi bernilai true 
      }
      ... -> keluar dari blok jika kondisi bernilai false

MATERI 22 --------------------------------------------------------------------------------------------------------------------------------
   Rumus : 
      if(kondisi){
         aksi 1 -> lakukan aksi 1 jika kondisi bernilai true
      } else if(kondisi 2){ 
         aksi 2
      }else {
         aksi 3 -> lakukan aksi 3 jika kondisi bernilai false
      }
MATERI 23 --------------------------------------------------------------------------------------------------------------------------------
MATERI 24 --------------------------------------------------------------------------------------------------------------------------------
*catatan
   - ==  -> operator perbandingan
   - === -> operator identitas
   - parseInt() --> sebuah proses untuk mengubah string menjadi integer
   - case harus nilai, tidak bisa dimasukkan kondisi,hanya bisa nilai langsung saja

MATERI 25 --------------------------------------------------------------------------------------------------------------------------------
*catatan
   - butuh mengulang dan belajar logic

MATERI 26 --------------------------------------------------------------------------------------------------------------------------------
MATERI 27 --------------------------------------------------------------------------------------------------------------------------------
   "function adalah kunci utama pada javascript yang membuat javascript sangat powerfull." - Douglas Crockford

   function : - sebuah sub-program / sub-routine yang dapat 'dipanggil' di bagian lain pada program 
              - merupakan struktur dasar pembentuk dari javascript
              - disebut juga sebagai prosedur (kumpulan statement untuk melakukan tugas atau menghitung sebuah nilai)
              - untuk dapat menggunakan, kita harus 'membuat' terlebih dahulu function tersebut, lalu 'memanggil'nya
              - termasuk kedalam first-class object

   category : - Built-in Function     : - fungsi yang disediakan / 'dibuat' oleh javascript
                                        - kita tinggal panggil 'memanggil'-nya saja
                                        - ex : > alert();       > confirm();        > prompt();     > dll.
                                    > String : - chartAt()      - slice()           - split         - toString()
                                               - toLowerCase()  - toUpperCase(),    ...
                                               - https://www.w3schools.com/jsref/jsref_obj_string.asp
                                               - ex : in js file
                                    > Math   : - sin()           - cos()            - tan()         - random()
                                               - round()         - floor()          - ceil()        - log()
                                               - https://www.w3schools.com/jsref/jsref_obj_math.asp
                                               - ex : in js file

              - User-Defined Function : - fungsi yang kita buat sendiri
                                        - menggunakan keyword function
                                        - nama function (optional)
                                        - parameter / argument
                                          > disimpan didalam()
                                          > boleh ada atau tidak, jika ada boleh lebih dari satu
                                          > dipisahkan oleh koma (,)
                                        - function body, 'dibungkus' dengan {}
                                        - dapat mengembalikan nilai (return value) atau tidak
                        > cara membuat: - Dengan deklarasi / function decalaration
                                          ex: in js file
                                        - Dengan ekspresi / function expression
                                          ex: in js file

MATERI 28 -----------------------------------------------------------------------------------------------------------------------------
   'function yang baik adalah function yang mengerjakan 1 hal saja'

   cara kerja : input -> function -> output

   function: - Blok kode yang dibuat untuk melakukan tugas spesifik
             - Dapat dipanggil berulang kali
             - Memudahkan penelusuran
             - Reusability

MATERI 29 -----------------------------------------------------------------------------------------------------------------------------
   parameter : variable yang ditulis di dalam kurung pada saat function dibuat, digunakan untuk menampung nilai yang
               dikirimkan saat function dipanggil.

   argument  : nilai yang dikirimkan ke parameter  saat fungsi dipanggil.
   arguments : array yang berisi nilai dikirimkan saat fungsi dipanggil.

*catatan 
   - jika parameter lebih sedikit dari argument, maka argument kelebihannya akan diabaikan.
   - jika parameter lebih banyak dari argument, maka parameter kelebihannya akan diisi dengan nilai undefined

MATERI 30 -----------------------------------------------------------------------------------------------------------------------------
   refactoring : sebuah proses mengubah kode agar menjadi lebih 'baik' tanpa mengubah fungsionalitasnya.
      manfaat  : - readability (mudah dibaca)
                 - DRY (Don't Repeat Yourself) (ex: efisiensi penggunaan function)
                 - Testability (mudah untuk di test/ pengujian)
                 - Performance (penulisan kode agar meningkatkan performa program) 
                 - Maintainability (agar program kita dapat mudah di kelola dan dikembangkan)

MATERI 31 -----------------------------------------------------------------------------------------------------------------------------
   scope(lingkup variable) : bagaimana sebuah variable dapat diakses dalam program

   macam2: - block scope   :
                        ex : in js file.
           - function scope: 
                        ex : in js file.
*catatan: 
   - didalam function kita bisa mengakses variable global
   - di luar kita tidak bisa mengakses variable lokal(yang ada didalam function)
   - *jika anda ingin membuat variable didalam function tanpa var(dan diluar function juga belum dideskripsikan) maka
      javascript akan otomatis membuat variable global yang ada di luar function (counternya : "use strict")

MATERI 32 ------------------------------------------------------------------------------------------------------------------------------
   Rekursif(rekursi/recursion) : sebuah fungsi yang memenaggil dirinya sendiri 
                                 (yang harus berakhir dan menghasilkan nilai).
   Base Case                   : kondisi akhir dari rekursif yang menghasilkan nilai.

      cara kerja: ~> input 
                  ~> function(setelah dijalankan ada baris kode yang mememanggil dirinya sendiri) -> dst -> dan suatu saat pemanggilannya berhenti
                  ~> dan menghasilkan sebuah output/nilai
      
      implementasi: - menggantikan looping
                    - fibonacci
                    - pencarian dan penelusuran pada struktur data list dan tree 
                    - bahasa pemrograman yang tidak memiliki pengulangan
                        ex: Haskell, Erlang, Prolog, dll.
                    - dll.

*catatan :
   - semua looping bisa dibuat rekursif, tapi tidak untuk sebaliknya
   -* coba search recursion di google wkwk

MATERI 33 ------------------------------------------------------------------------------------------------------------------------------
   function decalaration : - function yang normal.
                           - lebih fleksibel (dapat ditulis dimanapun) (bisa di panggil dulu baru dideklarasikan ataupun sebaliknya).
                              - karena konsep Hoisting.
                           - Mudah dipahami pemula.
                           

   function expression   : - fuctionnya boleh aja gak punya nama.
                           - biasanya disimpan ke dalam sebuah variable.
                           - Harus didefinisikan terlebih dahulu sebelum dipanggil.
                           - lebih powerfull :
                              - sebagai closure
                              - sebagai argumen untuk function lain
                              - IIFE (Immediately Invoked Function Expression)

MATERI 34 ------------------------------------------------------------------------------------------------------------------------------
   array secara umum adalah sususan sistematis dari objek objek yang serupa.
   array : tipe data yang digunakan untuk mendeskripsikan kumpulan elemen (nilai atau variable), yang tiap-tiap elemennya memiliki index.
      (array adalah variable yang lebih sakti dikarenakan bisa menampung lebih dari satu nilai).
   
         manfaat : - mempermudah pengelolaan nilai / value / data.
                     - penelusuran  dan pecarian
                  - manajemen memori.

   karakteristik : - variable jamak, yang mempunyai banyak elemen dan diacu dengan nama yang sama.
                   - kumpulan pasangan key dan nilai / key and value pair.
                   - key  adalah index pada array dengan tipe integer yang dimulai dari 0.
                   - array pada javascript bertipe object.
                   - array pada javascript memiliki fungsi / method length untuk menghitung jumlah elemen didalamnya.
                   - elemen pada array boleh memiliki tipe data yang berbeda.
            ex : in js file


MATERI 35 ------------------------------------------------------------------------------------------------------------------------------
   manipulasi array : - menambah elemen pada array.
                      - menghapus elemen pada array.
                      - menampilkan seluruh isi array.

            method  : - length (untuk mengetahui berapa jumlah elemen dalam array)
                      - join   (untuk menggabungkan seluruh isi array dan mengubahnya menjadi sebuah string)
                      - push , pop, shift, unshift (untuk menambah atau menghapus elemen array)
